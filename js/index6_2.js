// 'use strict';

// class Hamburger {
//   constructor(size, stuffing) {
//     this._size = size;
//     this._stuffing = stuffing;
//     this._toppings = [];
//   }

//   addTopping(topping) {
//     if (this._toppings.includes(topping)) {
//       console.log('Sorry, you can not add more');
//     } else {
//       this._toppings.push(topping);
//     }
//   }

//   removeTopping(topping) {
//     if (this._toppings.includes(topping)) {
//       this._toppings = this._toppings.filter(top => top !== topping);
//     }
//   }

//   getToppings() {
//     return this._toppings;
//   }

//   getSize() {
//     return this._size;
//   }

//   getStuffing() {
//     console.log(`The stuffing of hamburger is ${this._stuffing}`);
//   }

//   calculatePrice() {
//     const total = [];
//     for (let key in Hamburger.SIZES) {
//       if (key === this._size) {
//         total.push(Hamburger.SIZES[key].price);
//       }
//     }

//     for (let key in Hamburger.STUFFINGS) {
//       if (key === this._stuffing) {
//         total.push(Hamburger.STUFFINGS[key].price);
//       }
//     }

//     for (let elem of this._toppings) {
//       for (let key in Hamburger.TOPPINGS) {
//         if (key === elem) {
//           total.push(Hamburger.TOPPINGS[key].price);
//         }
//       }
//     }
//     const totalAmount = total.reduce((acc, value) => acc + value, 0);
//     return totalAmount;
//   }

//   calculateCalories() {
//     const total = [];
//     for (let key in Hamburger.SIZES) {
//       if (key === this._size) {
//         total.push(Hamburger.SIZES[key].calories);
//       }
//     }

//     for (let key in Hamburger.STUFFINGS) {
//       if (key === this._stuffing) {
//         total.push(Hamburger.STUFFINGS[key].calories);
//       }
//     }

//     for (let elem of this._toppings) {
//       for (let key in Hamburger.TOPPINGS) {
//         if (key === elem) {
//           total.push(Hamburger.TOPPINGS[key].calories);
//         }
//       }
//     }
//     const totalCalories = total.reduce((acc, value) => acc + value, 0);
//     return totalCalories;
//   }
// }

// Hamburger.SIZE_SMALL = 'SIZE_SMALL';
// Hamburger.SIZE_LARGE = 'SIZE_LARGE';
// Hamburger.SIZES = {
//   [Hamburger.SIZE_SMALL]: {
//     price: 30,
//     calories: 50,
//   },
//   [Hamburger.SIZE_LARGE]: {
//     price: 50,
//     calories: 100,
//   },
// };

// Hamburger.STUFFING_CHEESE = 'STUFFING_CHEESE';
// Hamburger.STUFFING_SALAD = 'STUFFING_SALAD';
// Hamburger.STUFFING_MEAT = 'STUFFING_MEAT';

// Hamburger.STUFFINGS = {
//   [Hamburger.STUFFING_CHEESE]: {
//     price: 15,
//     calories: 20,
//   },
//   [Hamburger.STUFFING_SALAD]: {
//     price: 20,
//     calories: 5,
//   },
//   [Hamburger.STUFFING_MEAT]: {
//     price: 35,
//     calories: 15,
//   },
// };

// Hamburger.TOPPING_SPICE = 'TOPPING_SPICE';
// Hamburger.TOPPING_SAUCE = 'TOPPING_SAUCE';

// Hamburger.TOPPINGS = {
//   [Hamburger.TOPPING_SPICE]: {
//     price: 10,
//     calories: 0,
//   },
//   [Hamburger.TOPPING_SAUCE]: {
//     price: 15,
//     calories: 5,
//   },
// };

// /* –í–æ—Ç –∫–∞–∫ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ */

// // –ú–∞–ª–µ–Ω—å–∫–∏–π –≥–∞–º–±—É—Ä–≥–µ—Ä —Å –Ω–∞—á–∏–Ω–∫–æ–π –∏–∑ —Å—ã—Ä–∞
// const hamburger = new Hamburger(
//   Hamburger.SIZE_SMALL,
//   Hamburger.STUFFING_CHEESE,
// );

// // –î–æ–±–∞–≤–∫–∞ –∏–∑ –ø—Ä–∏–ø—Ä–∞–≤—ã
// hamburger.addTopping(Hamburger.TOPPING_SPICE);

// // –°–ø—Ä–æ—Å–∏–º —Å–∫–æ–ª—å–∫–æ —Ç–∞–º –∫–∞–ª–æ—Ä–∏–π
// console.log('Calories: ', hamburger.calculateCalories());

// // // // –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?
// console.log('Price: ', hamburger.calculatePrice());

// // // // –Ø —Ç—É—Ç –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ —Ä–µ—à–∏–ª –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–æ—É—Å
// hamburger.addTopping(Hamburger.TOPPING_SAUCE);

// // // // –ê —Å–∫–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å —Å—Ç–æ–∏—Ç?
// console.log('Price with sauce: ', hamburger.calculatePrice());

// // // // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±–æ–ª—å—à–æ–π –ª–∏ –≥–∞–º–±—É—Ä–≥–µ—Ä?
// console.log(
//   'Is hamburger large: ',
//   hamburger.getSize() === Hamburger.SIZE_LARGE,
// ); // -> false

// // // // –£–±—Ä–∞—Ç—å –¥–æ–±–∞–≤–∫—É
// hamburger.removeTopping(Hamburger.TOPPING_SPICE);

// // // // –°–º–æ—Ç—Ä–∏–º —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–æ–∫
// console.log('Hamburger has %d topping(s)', hamburger.getToppings().length); // 1

// // /*
// //   üîî –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã:
// //     	‚úîÔ∏è –∫–ª–∞—Å—Å –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –≤–Ω–µ—à–Ω–∏–º –º–∏—Ä–æ–º. –≠—Ç–æ –Ω–µ –µ–≥–æ –¥–µ–ª–æ, —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è
// //     		–¥—Ä—É–≥–æ–π –∫–æ–¥, –∞ –∫–ª–∞—Å—Å –∂–∏–≤–µ—Ç –≤ –∏–∑–æ–ª—è—Ü–∏–∏ –æ—Ç –º–∏—Ä–∞
// //     	‚úîÔ∏è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ä–∞–∑–º–µ—Ä –∏ –Ω–∞—á–∏–Ω–∫–∞) –º—ã –ø–µ—Ä–µ–¥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä,
// // 		—á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç, –Ω–µ —É–∫–∞–∑–∞–≤ –∏—Ö
// //     	‚úîÔ∏è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ (–¥–æ–±–∞–≤–∫–∞) –¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã
// //     	‚úîÔ∏è —Ç–∏–ø—ã –Ω–∞—á–∏–Ω–æ–∫ –æ–±–æ–∑–Ω–∞—á–µ–Ω—ã "–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏" —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–æ—Å—Ç–æ
// // 	    	—Å–≤–æ–π—Å—Ç–≤–∞–º–∏, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–º –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å —Å—á–∏—Ç–∞—Ç—å "–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏")
// //     	‚úîÔ∏è –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π.
// //     	‚úîÔ∏è –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö –æ–±—ä–µ–∫—Ç–∞ –≥–∞–º–±—É—Ä–≥–µ—Ä–∞ –ª–æ–≥–∏—á–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ä–∞–∑–º–µ—Ä, —Ç–∏–ø –Ω–∞—á–∏–Ω–∫–∏),
// //       		–∞ –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∏–∑ –Ω–∏—Ö (—Ü–µ–Ω–∞, —á–∏—Å–ª–æ –∫–∞–ª–æ—Ä–∏–π –∏ —Ç.–¥.). –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ü–µ–Ω—É –∏ –∫–∞–ª–æ—Ä–∏–∏
// // 		–ª–æ–≥–∏—á–Ω–æ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –∞ –Ω–µ –∑–∞—Ä–∞–Ω–µ–µ.
